#!/usr/bin/env node

const config = require("../config/configRouter");


/**
 * Module dependencies.
 */

var debug = require('debug')('expressapp:server');

if(config.server.useHttp) {
  var app = require('../app');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.HTTPPORT || '3000');
  app.set('port', port);


  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);
  console.log('program now running http on port:', port);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/* * https部分 */

if(config.server.useHttps) {
  let { httpsConfig } = config.server
  var httpsapp = require('../app');
  var https = require('https');
  var fs = require('fs');
  var httpsPort = normalizePort(process.env.HTTPSPORT || '3001');
  var httpsOptions = {
      key: fs.readFileSync(httpsConfig.key),  // 'xxxxxxx.key'
      cert: fs.readFileSync(httpsConfig.cert) // 'xxxxxxx.cert'
  };

  httpsapp.set('port', httpsPort);
  var httpsserver = https.createServer(httpsOptions, httpsapp);
  console.log('program now running https on port:', port);

  httpsserver.listen(httpsPort);
  httpsserver.on('error', onError);
  httpsserver.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  console.log(error)
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
